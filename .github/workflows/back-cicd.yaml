name: Spring Back CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [dev]

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: "./back"

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"

      # clean the /target folder
      # compiles the java source code
      # convert the compiled code to a jar and put it into /target
      # copies the packaged JAR or WAR file into the local Maven repository (~/.m2/repository)
      - name: Build with Maven
        run: mvn clean install -DskipTests # so we don't run the tests two times

      # don't need to call mvn jacoco:report since pom xml contains the coverage as a goal
      - name: Run Tests
        run: mvn clean test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./back/target/surefire-reports

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          # -Dsonar.java.binaries=./back/target/classes/com/openclassrooms/bobapp
          args: >
            -Dsonar.projectKey=ask0ldd_schoolwork-cicd-refresh-back
            -Dsonar.organization=ask0ldd
            -Dsonar.sources=./back/src/main/java
            -Dsonar.tests=./back/src/test/java
            -Dsonar.java.binaries=./back/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=./back/target/site/jacoco/jacoco.xml
            -Dsonar.exclusions=front/.angular/**,front/node_modules/**,front/coverage/**,front/src/environments/**,.git,.github,back/target/**,back/src/test/**,**/*.spec.ts,**/*.conf.js

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker build -t $DOCKER_USERNAME/bobappback:latest .
          docker push $DOCKER_USERNAME/bobappback:latest
