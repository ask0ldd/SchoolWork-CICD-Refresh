# définit le nom du workflow
name: Angular Front CI/CD

# liste les évènements déclenchant l'exécution du workflow
on:
  pull_request:
    branches: [main]
  push:
    branches: [dev]

# définition d'un job nommé "test-n-build" s'exécutant au sein d'un environnement
# dont l'OS est ubuntu dernière version
jobs:
  test-n-build:
    runs-on: ubuntu-latest

    # définit une matrix de stratégie menant à l'exécution du job avec
    # les version de node 18 & 20, soit les deux dernières versions LTS
    # qui n'ont pas atteint la fin de leur cycle de vie
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      # permet de faire en sorte que tous les jobs de la matrice s'exécutent
      # même si l'un d'eux échoue
      fail-fast: false

    # définit le répertoire actif par défault
    defaults:
      run:
        working-directory: "./front"

    steps:
      # ETAPE 1 : CHECKOUT
      # checks out le repository en utilisant l'action préexistante actions/checkout@v4
      # checkout : met le code du repository à disposition du workflow
      # i.e : cloning du repository, fetching du dernier commit, authentification git, ...
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0

      # ETAPE 2 : INSTALLATION DE NODE JS
      # installe node.js sur le serveur assigné au workflow et à "node-version" issue de la matrice
      # un serveur installera node 18, l'autre node 20 avant de poursuivre le job
      - name: Use Node.js ${{ matrix.node-version }}
        # utilisation d'une action préexistante
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # les dépendances présentes dans package-lock.json devront être mises en cache
          cache: "npm"
          cache-dependency-path: "./front/package-lock.json"

      # ETAPE 3 : INSTALLATION DES DEPENDANCES DU PROJET
      - name: Install dependencies
        run: npm ci

      # ETAPE 4 : EXECUTION DES TESTS & GENERATION DU COVERAGE
      - name: Run Angular tests & generate coverage
        run: |
          npm run test:ci
          npm run coverage:ci

      # ETAPE 6 : GENERATION D’UN ARTEFACT CONTENANT CES DONNEES
      # uploade et met à disposition les artefacts relatifs au coverage pour chaque version
      # de node testée
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: ./front/coverage/bobapp/lcov-report

      # ETAPE 7 : BUILD DU FRONTEND ANGULAR DE L’APPLICATION
      - name: Build Angular Frontend
        run: npm run build --prod

      # ETAPE 8 : ANALYSE DE LA QUALITE DU CODE VIA SONARCLOUD
      - name: SonarCloud Front-end Scan
        # étape uniquement exécutée pour le serveur node 20
        if: ${{ matrix.node-version == '20.x' }}
        # utilisation d'une action préexistante
        uses: sonarsource/sonarcloud-github-action@master
        env:
          # token permettant au workflow de s'authentifier auprès de sonarcloud
          # généré via l'interface de sonarcloud & inséré en tant que secret
          # dans les settings du repository
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          # projectKey : identifiant du projet qui regrupera les résultats de l'analyse
          # reportPaths : informations liées au coverage générées lors de l'étape
          # "Generate Angular Coverage"
          # exclusions : repertoires, sous repertoires, fichiers qui doivent être ignorés
          # lors de l'analyse
          # save : -Dsonar.exclusions=front/.angular/**,front/node_modules/**,front/coverage/**,front/src/environments/**,.git,.github,back/**,**/*.spec.ts,**/*.conf.js,front/src/test.ts,front/src/main.ts
          projectBaseDir: ./front
          args: >
            -Dsonar.projectKey=ask0ldd_schoolwork-cicd-refresh-front
            -Dsonar.organization=ask0ldd
            -Dsonar.sources=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info
            -Dsonar.coverage.exclusions=.angular/**,node_modules/**,coverage/**,src/environments/**,**/*.spec.ts,**/*.conf.js,src/test.ts,src/main.ts
            -Dsonar.exclusions=.angular/**,node_modules/**,coverage/**

      # ETAPE 8.5 : UPLOAD SONARQUBE REPORT AS ARTIFACT
      - name: Upload SonarQube Report
        if: ${{ matrix.node-version == '20.x' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: ${{ github.workspace }}/front/.scannerwork/report-task.txt

      # ETAPE 9 : BUILD & UPLOAD DE L’IMAGE DOCKER VERS DOCKERHUB
      - name: Docker Build and Push
        if: ${{ matrix.node-version == '20.x' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN
          docker build -t $DOCKER_USERNAME/bobappfront:latest .
          docker push $DOCKER_USERNAME/bobappfront:latest
