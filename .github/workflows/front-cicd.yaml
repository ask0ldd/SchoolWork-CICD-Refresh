# définit le nom du workflow
name: Angular Front CI/CD

# liste les évènements déclenchant l'exécution du workflow
on:
  pull_request:
    branches: [main]
  push:
    branches: [dev]

# définition d'un job nommé "test-n-build" s'exécutant au sein d'un environnement
# dont l'OS est ubuntu dernière version
jobs:
  test-n-build:
    runs-on: ubuntu-latest

    # définit une matrix de stratégie menant à l'exécution du job avec plus
    # version de node : node 18 & node 20, soit les deux versions LTS de node
    # qui n'ont pas atteint leur fin de vie
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      # permet de faire en sorte que tous les jobs de la matrice s'exécutent
      # même si l'un d'eux échoue
      fail-fast: false

    # définit le répertoire actif par défault
    defaults:
      run:
        working-directory: "./front"

    # checks out le repository en utilisant l'action préexistante actions/checkout@v4
    # checkout : met le code du repository à disposition du workflow
    # i.e : cloning du repository, fetching du dernier commit, authentification git, ...
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # installe node.js sur le serveur assigné au workflow et à "node-version" issue de la matrice
      # un serveur installera node 18, l'autre node 20 avant de poursuivre le job
      - name: Use Node.js ${{ matrix.node-version }}
        # utilisation d'une action préexistante
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # les dépendances présentes dans package-lock.json devront être mises en cache
          cache: "npm"
          cache-dependency-path: "./front/package-lock.json"

      # installe les dépendances listées dans le fichier json
      - name: Install dependencies
        run: npm ci

      # exécute les tests unitaires / d'intégration
      - name: Run Angular tests
        run: npm run test:ci

      # génère le coverage
      - name: Generate Angular Coverage
        run: npm run coverage:ci

      # uploade et met à disposition les artefacts relatifs au coverage pour chaque version
      # de node testée
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: ./front/coverage/bobapp/lcov-report

      # build le frontend angular
      - name: Build Angular Frontend
        run: npm run build --prod

      # débute l'analyse de la qualité du code à l'aide de sonarcloud
      - name: SonarCloud Front-end Scan
        # étape uniquement exécutée pour le serveur node 20
        if: ${{ matrix.node-version == '20.x' }}
        # utilisation d'une action préexistante
        uses: sonarsource/sonarcloud-github-action@master
        env:
          # token permettant au workflow de s'authentifier auprès de sonarcloud
          # généré via l'interface de sonarcloud & inséré en tant que secret
          # dans les settings du repository
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          # projectKey : identifiant du projet qui regrupera les résultats de l'analyse
          # reportPaths : informations liées au coverage générées lors de l'étape
          # "Generate Angular Coverage"
          # exclusions : repertoires, sous repertoires, fichiers qui doivent être ignorés
          # lors de l'analyse
          args: >
            -Dsonar.projectKey=ask0ldd_schoolwork-cicd-refresh-front
            -Dsonar.organization=ask0ldd
            -Dsonar.sources=./front/src
            -Dsonar.javascript.lcov.reportPaths=./front/coverage/bobapp/lcov.info
            -Dsonar.exclusions=front/.angular/**,front/node_modules/**,front/coverage/**,front/src/environments/**,.git,.github,back/**,**/*.spec.ts,**/*.conf.js,front/src/test.ts,front/src/main.ts

      # authentification auprès de docker
      - name: Docker Login
        # étape uniquement exécutée pour le serveur node 20
        if: ${{ matrix.node-version == '20.x' }}
        env:
          # utilisation des secrets générés via l'interface de docker
          # & insérés dans les settings du repository
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN

      # build & upload de l'image résultant de certaines des étapes précédentes du workflow
      # vers docker hub
      - name: Build & Push Docker Image
        # étape uniquement exécutée pour le serveur node 20
        if: ${{ matrix.node-version == '20.x' }}
        env:
          # utilisation d'un secret généré via l'interface de docker
          # & insérés dans les settings du repository
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        # l'image sera accessible via l'identifiant askldd/bobappfront:latest
        run: |
          docker build -t $DOCKER_USERNAME/bobappfront:latest .
          docker push $DOCKER_USERNAME/bobappfront:latest
